name: Deploy Web App

permissions:
  contents: write
  packages: write

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: nikolasluiz123/fitnesspro-administrator:latest
          secrets: |
            "PACKAGES_TOKEN=${{ secrets.PACKAGES_TOKEN }}"
          build-args: |
            GITHUB_ACTOR=${{ github.actor }}

  release:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up XML tools
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-utils

      - name: Extract version
        id: get_version
        run: |
          RAW_VERSION=$(xmllint --xpath "/*[local-name()='project']/*[local-name()='version']/text()" pom.xml)
          echo "VERSION=${RAW_VERSION}" >> $GITHUB_ENV

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Create Git tag and GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: "Release ${{ env.VERSION }}"
          generate_release_notes: true

  deploy:
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: SSH and deploy
        run: |
          echo "${{ secrets.SERVER_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} << 'EOF'
            docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
            docker pull nikolasluiz123/fitnesspro-administrator:latest
            docker stop administrator-web-app || true
            docker rm administrator-web-app || true
            docker image prune -a -f
            docker run -d -p 8080:8080 \
              -e FITNESS_PRO_ADMINISTRATOR_ENV=remote \
              -e JWT_TOKEN="${{ secrets.JWT_TOKEN }}" \
              --name administrator-web-app \
              nikolasluiz123/fitnesspro-administrator:latest
          EOF
          rm private_key.pem